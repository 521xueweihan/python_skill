#coding:utf-8
################
# 13.尽量转换为浮点类型后在做除法
###############
"""
前言:当两个操作数都为整数的时候，其返回值也为证书，运算结果
将直接截断，从而在实际应用中造成潜在的误差。

所以：当涉及除法运算是尽量先将操作数转换为浮点类型在做运算。
"""
#from __future__ import division # __future__ 模块是为了方便从2.x到3.x的过渡，用于引入3.x的新特性


# 方法1:
gpa = (3+1) / 3

real_gpa = float(3+1) / 3 # 通过强制转化为float类型

print 'Wrong:', gpa,' Right:', real_gpa

# 方法2:
# 去掉第十一行开头的‘#’
gpa = (3+1) / 3

print '使用python3中的division模块，实现精准除法，gpa=', gpa


#注意：浮点数可能有的情境下不准，看下面的代码：

i = 1
while i != 1.5:
    i = i + 0.1
    print i
    
# 这段代码会无限循环，因为浮点数的存储规则，只是无限接近。如0.1实际上
# 存储的是0.10000000...1（截止的位置以数据类型为准），当循环到第5次的
# 时候实际值是1.50000000000...4，则条件表达式True，陷入无限循环。
# 
# 所以浮点数的比较最好能指明精度。
